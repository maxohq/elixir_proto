üöÄ Setting up benchmark data...
‚úÖ Data prepared, starting benchmarks...
Operating System: macOS
CPU Information: Apple M3 Ultra
Number of Available Cores: 28
Available memory: 256 GB
Elixir 1.18.3
Erlang 27.3
JIT enabled: true

Benchmark suite executing with the following configuration:
warmup: 2 s
time: 3 s
memory time: 1 s
reduction time: 0 ns
parallel: 1
inputs: none specified
Estimated total run time: 1 min

Benchmarking ElixirProto.encode large struct (full) ...
Benchmarking ElixirProto.encode large struct (sparse) ...
Benchmarking ElixirProto.encode product ...
Benchmarking ElixirProto.encode single user (full) ...
Benchmarking ElixirProto.encode sparse user ...
Benchmarking Plain.encode large struct (full) ...
Benchmarking Plain.encode large struct (sparse) ...
Benchmarking Plain.encode product ...
Benchmarking Plain.encode single user (full) ...
Benchmarking Plain.encode sparse user ...
Calculating statistics...
Formatting results...

*** üî• ENCODING PERFORMANCE ***

Name                                               ips        average  deviation         median         99th %
ElixirProto.encode sparse user                252.87 K        3.95 Œºs   ¬±241.80%        3.46 Œºs        6.96 Œºs
Plain.encode sparse user                      176.40 K        5.67 Œºs   ¬±148.66%        5.21 Œºs        6.75 Œºs
ElixirProto.encode large struct (sparse)      157.86 K        6.33 Œºs    ¬±72.04%        5.88 Œºs       10.46 Œºs
ElixirProto.encode product                    135.80 K        7.36 Œºs    ¬±68.65%        7.04 Œºs        9.54 Œºs
Plain.encode product                          117.40 K        8.52 Œºs    ¬±72.16%        8.17 Œºs       10.42 Œºs
ElixirProto.encode single user (full)         106.09 K        9.43 Œºs    ¬±65.20%        9.08 Œºs       13.25 Œºs
ElixirProto.encode large struct (full)        105.63 K        9.47 Œºs    ¬±55.19%           9 Œºs       16.54 Œºs
Plain.encode single user (full)               101.40 K        9.86 Œºs    ¬±55.01%        9.54 Œºs       13.01 Œºs
Plain.encode large struct (sparse)             90.36 K       11.07 Œºs    ¬±46.24%       10.71 Œºs       16.33 Œºs
Plain.encode large struct (full)               72.84 K       13.73 Œºs    ¬±34.18%       13.38 Œºs       22.97 Œºs

Comparison: 
ElixirProto.encode sparse user                252.87 K
Plain.encode sparse user                      176.40 K - 1.43x slower +1.71 Œºs
ElixirProto.encode large struct (sparse)      157.86 K - 1.60x slower +2.38 Œºs
ElixirProto.encode product                    135.80 K - 1.86x slower +3.41 Œºs
Plain.encode product                          117.40 K - 2.15x slower +4.56 Œºs
ElixirProto.encode single user (full)         106.09 K - 2.38x slower +5.47 Œºs
ElixirProto.encode large struct (full)        105.63 K - 2.39x slower +5.51 Œºs
Plain.encode single user (full)               101.40 K - 2.49x slower +5.91 Œºs
Plain.encode large struct (sparse)             90.36 K - 2.80x slower +7.11 Œºs
Plain.encode large struct (full)               72.84 K - 3.47x slower +9.77 Œºs

Memory usage statistics:

Name                                        Memory usage
ElixirProto.encode sparse user                     840 B
Plain.encode sparse user                           264 B - 0.31x memory usage -576 B
ElixirProto.encode large struct (sparse)          1824 B - 2.17x memory usage +984 B
ElixirProto.encode product                         800 B - 0.95x memory usage -40 B
Plain.encode product                               264 B - 0.31x memory usage -576 B
ElixirProto.encode single user (full)              800 B - 0.95x memory usage -40 B
ElixirProto.encode large struct (full)            1696 B - 2.02x memory usage +856 B
Plain.encode single user (full)                    264 B - 0.31x memory usage -576 B
Plain.encode large struct (sparse)                 264 B - 0.31x memory usage -576 B
Plain.encode large struct (full)                   264 B - 0.31x memory usage -576 B

**All measurements for memory usage were the same**
Operating System: macOS
CPU Information: Apple M3 Ultra
Number of Available Cores: 28
Available memory: 256 GB
Elixir 1.18.3
Erlang 27.3
JIT enabled: true

Benchmark suite executing with the following configuration:
warmup: 2 s
time: 3 s
memory time: 1 s
reduction time: 0 ns
parallel: 1
inputs: none specified
Estimated total run time: 36 s

Benchmarking ElixirProto 100 sparse users ...
Benchmarking ElixirProto 100 users (individual) ...
Benchmarking ElixirProto 50 products ...
Benchmarking Plain 100 sparse users ...
Benchmarking Plain 100 users (individual) ...
Benchmarking Plain 50 products ...
Calculating statistics...
Formatting results...

*** üì¶ COLLECTION ENCODING (Individual Structs) ***

Name                                         ips        average  deviation         median         99th %
ElixirProto 50 products                   2.45 K      407.61 Œºs     ¬±7.65%      407.29 Œºs      451.89 Œºs
ElixirProto 100 sparse users              2.38 K      420.57 Œºs     ¬±8.33%      418.38 Œºs      463.08 Œºs
Plain 50 products                         2.17 K      459.90 Œºs     ¬±8.87%      453.50 Œºs      542.90 Œºs
Plain 100 sparse users                    1.72 K      580.34 Œºs     ¬±7.32%      579.13 Œºs      641.28 Œºs
ElixirProto 100 users (individual)        1.00 K     1000.62 Œºs     ¬±6.19%      997.42 Œºs     1068.88 Œºs
Plain 100 users (individual)              0.97 K     1032.43 Œºs     ¬±7.35%     1031.50 Œºs     1197.59 Œºs

Comparison: 
ElixirProto 50 products                   2.45 K
ElixirProto 100 sparse users              2.38 K - 1.03x slower +12.96 Œºs
Plain 50 products                         2.17 K - 1.13x slower +52.30 Œºs
Plain 100 sparse users                    1.72 K - 1.42x slower +172.73 Œºs
ElixirProto 100 users (individual)        1.00 K - 2.45x slower +593.01 Œºs
Plain 100 users (individual)              0.97 K - 2.53x slower +624.82 Œºs

Memory usage statistics:

Name                                  Memory usage
ElixirProto 50 products                   38.99 KB
ElixirProto 100 sparse users              82.01 KB - 2.10x memory usage +43.02 KB
Plain 50 products                         12.89 KB - 0.33x memory usage -26.10156 KB
Plain 100 sparse users                    25.68 KB - 0.66x memory usage -13.31250 KB
ElixirProto 100 users (individual)        78.04 KB - 2.00x memory usage +39.05 KB
Plain 100 users (individual)              25.78 KB - 0.66x memory usage -13.21094 KB

**All measurements for memory usage were the same**

üìä PAYLOAD SIZE ANALYSIS
================================================================================

Single User (full data):
  üì¶ Uncompressed: 478 bytes
  üóúÔ∏è  Plain+gzip:   330 bytes (69.0% of original)
  ‚ö° ElixirProto:  288 bytes (60.3% of original)
  ‚úÖ Proto saves:   42 bytes (12.7% smaller)

Single User (sparse - only id, name):
  üì¶ Uncompressed: 125 bytes
  üóúÔ∏è  Plain+gzip:   111 bytes (88.8% of original)
  ‚ö° ElixirProto:  34 bytes (27.2% of original)
  ‚úÖ Proto saves:   77 bytes (69.4% smaller)

Single Product:
  üì¶ Uncompressed: 341 bytes
  üóúÔ∏è  Plain+gzip:   250 bytes (73.3% of original)
  ‚ö° ElixirProto:  187 bytes (54.8% of original)
  ‚úÖ Proto saves:   63 bytes (25.2% smaller)

Large Struct (all 50 fields):
  üì¶ Uncompressed: 1279 bytes
  üóúÔ∏è  Plain+gzip:   302 bytes (23.6% of original)
  ‚ö° ElixirProto:  136 bytes (10.6% of original)
  ‚úÖ Proto saves:   166 bytes (55.0% smaller)

Large Struct (only 10/50 fields):
  üì¶ Uncompressed: 879 bytes
  üóúÔ∏è  Plain+gzip:   223 bytes (25.4% of original)
  ‚ö° ElixirProto:  64 bytes (7.3% of original)
  ‚úÖ Proto saves:   159 bytes (71.3% smaller)

üóÇÔ∏è  COLLECTION SIZE ANALYSIS
100 Users - Individual encoding:
  ElixirProto total: 28930 bytes
  Plain total:       33210 bytes
  Savings:           4280 bytes
100 Users - Collection encoding (Plain only):
  Plain collection:  1901 bytes
  vs Individual sum: 33210 bytes
  Collection saves:  31309 bytes

üìà FIELD COUNT IMPACT ANALYSIS
================================================================================
5 fields: Proto=45b, Plain=208b, Savings=163b (78.4%)
10 fields: Proto=62b, Plain=226b, Savings=164b (72.6%)
20 fields: Proto=91b, Plain=255b, Savings=164b (64.3%)
30 fields: Proto=110b, Plain=278b, Savings=168b (60.4%)
50 fields: Proto=135b, Plain=300b, Savings=165b (55.0%)

üéØ BENCHMARK SUMMARY
ElixirProto shines when:
  ‚úÖ Structs have many fields (field name overhead)
  ‚úÖ Many nil/sparse fields (nil omission)
  ‚úÖ Collections of similar structs

Plain serialization works better when:
  ‚úÖ One-off serialization of different data types
  ‚úÖ Very small structs (few fields)

‚ú® Benchmarks completed!
